{"version":3,"sources":["vapor.jpg","beep.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Sounds","react_default","a","createElement","id","src","beep","StartStop","props","isStopped","className","onClick","startTimer","stopTimer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timerDisplay","currentMode","breakLength","sessionLength","bind","assertThisInitialized","incrementTime","incrementSession","decrementSession","incrementBreak","decrementBreak","startSessionMode","startBreakMode","determineTimerMode","playBeep","reset","audioElement","document","getElementById","play","_this2","tempTimerDispay","timer","setInterval","setState","clearInterval","tempSessionLength","tempBreakLength","currentSessionLength","currentBreakLength","alert","pause","load","timeObject","sessionBreakMinify","Math","floor","slice","secify","vapor","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f72ad470.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vapor.d5055a1f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beep.a72013cf.mp3\";","import React, { Component } from 'react';\nimport vapor from './vapor.jpg';\nimport './App.css';\nimport beep from './beep.mp3';\n\n\nfunction Sounds() {\n  return(\n    <div>\n      <audio id=\"beep\" src={ beep }></audio>\n    </div>\n  );\n}\n\nfunction StartStop(props) {\n  if (props.isStopped === true) {\n    return <button className=\"app-button\" id=\"start_stop\" onClick={props.startTimer}>Start</button>\n  } else {\n    return <button className=\"app-button\" id=\"start_stop\" onClick={props.stopTimer}>Stop</button>\n  };\n};\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n      timerDisplay: 1500,\n      isStopped: true,\n      currentMode: 'Session',\n      breakLength: 300,\n      sessionLength: 1500\n    };\n\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.incrementTime = this.incrementTime.bind(this)\n    this.incrementSession = this.incrementSession.bind(this);\n    this.decrementSession = this.decrementSession.bind(this);\n    this.incrementBreak = this.incrementBreak.bind(this);\n    this.decrementBreak = this.decrementBreak.bind(this);\n    this.startSessionMode = this.startSessionMode.bind(this);\n    this.startBreakMode = this.startBreakMode.bind(this);\n    this.determineTimerMode = this.determineTimerMode.bind(this);\n    this.playBeep = this.playBeep.bind(this);\n    this.reset = this.reset.bind(this);\n  };\n\n  playBeep(){\n    this.audioElement = document.getElementById('beep');\n    this.audioElement.play();\n  };\n\n  incrementTime() {\n    let tempTimerDispay = this.state.timerDisplay\n    this.timer = setInterval(() => {\n      if(this.state.timerDisplay >= 1) {\n        this.setState({\n          timerDisplay: tempTimerDispay -= 1\n        });\n        if(tempTimerDispay === 0) { this.playBeep() }\n      } else {\n\n        this.stopTimer();\n\n        this.determineTimerMode();\n      }\n    }, 1000)\n  };\n\n\n  startTimer() {\n    if(this.state.isStopped){\n      if(this.timer) { clearInterval(this.timer) }\n      this.setState({\n        isStopped: false\n      });\n      this.incrementTime();\n    }\n  }\n\n  stopTimer() {\n    this.setState({\n      isStopped: true\n    });\n    clearInterval(this.timer);\n  }\n\n  incrementSession() {\n    if(this.state.isStopped && this.state.sessionLength < 3600) {\n      let tempSessionLength = this.state.sessionLength\n      if(this.state.currentMode !== 'Break') {\n        this.setState({\n          sessionLength: tempSessionLength += 60,\n          timerDisplay: tempSessionLength\n        });\n      } else {\n        this.setState({\n          sessionLength: tempSessionLength += 60\n        });\n      }\n    }\n  };\n\n  decrementSession() {\n    if(this.state.isStopped && this.state.sessionLength > 60) {\n      let tempSessionLength = this.state.sessionLength\n      if(this.state.currentMode !== 'Break') {\n        this.setState({\n          sessionLength: tempSessionLength -= 60,\n          timerDisplay: tempSessionLength\n        });\n      } else {\n        this.setState({\n          sessionLength: tempSessionLength -= 60\n        });\n      }\n    }\n  };\n\n  incrementBreak() {\n    if(this.state.isStopped && this.state.breakLength < 3600) {\n      let tempBreakLength = this.state.breakLength\n      if(this.state.currentMode && this.state.currentMode !== 'Session') {\n        this.setState({\n          breakLength: tempBreakLength += 60,\n          timerDisplay: tempBreakLength\n        });\n      } else {\n        this.setState({\n          breakLength: tempBreakLength += 60\n        });\n      }\n    }\n  };\n\n  decrementBreak() {\n    if(this.state.isStopped && this.state.breakLength > 60) {\n      let tempBreakLength = this.state.breakLength\n      if(this.state.currentMode && this.state.currentMode !== 'Session') {\n        this.setState({\n          breakLength: tempBreakLength -= 60,\n          timerDisplay: tempBreakLength\n        });\n      } else {\n        this.setState({\n          breakLength: tempBreakLength -= 60\n        });\n      }\n    }\n  };\n\n\n  startSessionMode() {\n    let currentSessionLength =  this.state.sessionLength\n    this.setState({\n      currentMode: 'Session',\n      timerDisplay: currentSessionLength\n    });\n  }\n\n  startBreakMode() {\n    let currentBreakLength = this.state.breakLength\n    this.setState({\n      currentMode: 'Break',\n      timerDisplay: currentBreakLength\n    });\n  }\n\n  determineTimerMode() {\n    if(this.state.currentMode === 'Session') {\n      this.startBreakMode();\n    } else {\n      this.startSessionMode();\n    }\n    this.state.currentMode ? this.startTimer() : alert('Timer mode cannot be determined')\n  }\n\n  reset() {\n    this.stopTimer();\n    this.setState({\n      timerDisplay: 1500,\n      isStopped: true,\n      currentMode: 'Session',\n      breakLength: 300,\n      sessionLength: 1500\n    });\n    if(this.audioElement) { \n      this.audioElement.pause();\n      this.audioElement.load();\n     }\n  };\n\n  render(){\n\n    // returns number of minutes in time object\n    const minify = (timeObject) => {\n      return (\"0\" + (Math.floor(timeObject / 60))).slice(-2);\n    }\n\n    const sessionBreakMinify = (timeObject) => {\n      return timeObject !== 3600 ? (\"\" + (Math.floor(timeObject / 60))).slice(-2) : 60;\n    }\n\n    // returns number of seconds in time object\n    const secify = (timeObject) => {\n      return (\"0\" + timeObject % 60).slice(-2);\n    }\n\n    const timerDisplay = minify(this.state.timerDisplay)  + ':' +  secify(this.state.timerDisplay)\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-main\">\n        <img src={vapor} className=\"vapor-logo\" alt=\"logo\" />\n        <p>\n          <span id=\"header-string\">Welcome to the Pomodoro Clock</span>\n        </p>\n        <Sounds />\n\n        <div id=\"timers-container\">\n\n          <div id=\"set-session-container\">\n            <div id=\"main-set-sessions\">\n              <div id=\"set-session-clock-label\">\n              <div id=\"session-label\">Session Length</div> <div id=\"session-length\">{ sessionBreakMinify(this.state.sessionLength) }</div>\n              </div>\n            </div>\n            <div id=\"set-session-buttons\">\n              <button className=\"app-button\" id=\"session-increment\" onClick={this.incrementSession}>+</button>\n              <button className=\"app-button\" id=\"session-decrement\"onClick={this.decrementSession}>-</button>\n            </div>\n          </div>\n          \n          <div id=\"main-timer\">\n            <div id=\"main-timer-clock-label\">\n              <div id=\"timer-label\">{ this.state.currentMode } </div>\n              <div id=\"time-left\">{ timerDisplay }</div>\n            </div>\n            <div id=\"main-timer-buttons\">\n              <StartStop isStopped={this.state.isStopped} startTimer={this.startTimer} stopTimer={this.stopTimer}/>\n              <button className=\"app-button\" id=\"reset\"onClick={this.reset}>RESET</button>\n            </div>\n          </div>\n\n\n          <div id=\"set-break-container\">\n            <div id=\"main-set-break\">\n              <div id=\"set-break-clock-label\">\n              <div id=\"break-label\">Break Length</div> <div id=\"break-length\">{ sessionBreakMinify(this.state.breakLength) }</div>\n              </div>\n            </div>\n            <div id=\"set-break-buttons\">\n              <button className=\"app-button\" id=\"break-increment\" onClick={this.incrementBreak}>+</button>\n              <button className=\"app-button\" id=\"break-decrement\"onClick={this.decrementBreak}>-</button>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}